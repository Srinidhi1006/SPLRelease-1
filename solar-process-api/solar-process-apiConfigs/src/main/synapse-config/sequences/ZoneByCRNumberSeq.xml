<?xml version="1.0" encoding="UTF-8"?>
<sequence name="ZoneByCRNumberSeq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <propertyGroup>
        <property name="CommonLogFlowId" scope="default" type="STRING" value="zonebycrnumber"/>
        <property name="CommonLogInQueue" scope="default" type="STRING" value="GET -/zonebycrnumber"/>
        <property expression="get-property('MessageID')" group="3" name="CommonLogLoggingId" pattern="((urn|uuid):)*(.*)" scope="default" type="STRING"/>
        <property expression="get-property('correlation_id')" name="CommonLogLoggingId2" scope="default" type="STRING"/>
        <property name="CommonLogMessageType" scope="default" type="STRING" value="application/json"/>
        <property name="CommonLogOutQueue" scope="default" type="STRING" value="POST -/zonebycr"/>
    </propertyGroup>
    <propertyGroup>
        <property expression="get-property('query.param.crnumber')" name="crnumber" scope="default" type="STRING"/>
        <property expression="get-property('query.param.language')" name="language" scope="default" type="STRING"/>
        <property expression="get-property('query.param.format')" name="format" scope="default" type="STRING"/>
        <property expression="get-property('query.param.encode')" name="encode" scope="default" type="STRING"/>
    </propertyGroup>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <filter regex="true" source="boolean($ctx:crnumber)">
        <then/>
        <else>
            <filter regex="e" source="translate($ctx:language,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')">
                <then>
                    <filter regex="xml" source="$ctx:format">
                        <then>
                            <payloadFactory media-type="xml">
                                <format>
                                    <ZoneOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                        <Zones>null</Zones>
                                        <success>true</success>
                                        <result>null</result>
                                        <statusdescription>Incorrect Input: null or empty CRNumber</statusdescription>
                                        <fullexception>null</fullexception>
                                    </ZoneOutPutParams>
                                </format>
                                <args/>
                            </payloadFactory>
                            <propertyGroup>
                                <property name="contentType" scope="default" type="STRING" value="application/xml"/>
                                <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                            </propertyGroup>
                        </then>
                        <else>
                            <payloadFactory media-type="json">
                                <format>{&#xd;
    "totalSearchResults": null,&#xd;
    "Zones": null,&#xd;
    "success": false,&#xd;
    "result": null,&#xd;
    "statusdescription": "Incomple CR Number:Empty or Null String",&#xd;
    "fullexception": null&#xd;
}&#xd;
</format>
                                <args/>
                            </payloadFactory>
                        </else>
                    </filter>
                </then>
                <else>
                    <filter regex="xml" source="$ctx:format">
                        <then>
                            <payloadFactory media-type="xml">
                                <format>
                                    <ZoneOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                        <Zones>null</Zones>
                                        <success>true</success>
                                        <result>null</result>
                                        <statusdescription>Arabic Incorrect Input: null or empty CrNumber</statusdescription>
                                        <fullexception>null</fullexception>
                                    </ZoneOutPutParams>
                                </format>
                                <args/>
                            </payloadFactory>
                            <propertyGroup>
                                <property name="contentType" scope="default" type="STRING" value="application/xml"/>
                                <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                            </propertyGroup>
                        </then>
                        <else>
                            <payloadFactory media-type="json">
                                <format>{&#xd;
    "totalSearchResults": null,&#xd;
    "Zones": null,&#xd;
    "success": false,&#xd;
    "result": null,&#xd;
    "statusdescription": "Arabic Incomple CR Number:Empty or Null String",&#xd;
    "fullexception": null&#xd;
}&#xd;
</format>
                                <args/>
                            </payloadFactory>
                        </else>
                    </filter>
                </else>
            </filter>
            <loopback/>
        </else>
    </filter>
    <filter regex="[0-9]{10}" source="$ctx:crnumber">
        <then/>
        <else>
            <filter regex="e" source="translate($ctx:language,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')">
                <then>
                    <filter regex="xml" source="$ctx:format">
                        <then>
                            <payloadFactory media-type="xml">
                                <format>
                                    <ZoneOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                        <Zones>null</Zones>
                                        <success>true</success>
                                        <result>null</result>
                                        <statusdescription>Incorrect Input</statusdescription>
                                        <fullexception>null</fullexception>
                                    </ZoneOutPutParams>
                                </format>
                                <args/>
                            </payloadFactory>
                            <propertyGroup>
                                <property name="contentType" scope="default" type="STRING" value="application/xml"/>
                                <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                            </propertyGroup>
                        </then>
                        <else>
                            <payloadFactory media-type="json">
                                <format>{&#xd;
    "totalSearchResults": null,&#xd;
    "Zones": null,&#xd;
    "success": false,&#xd;
    "result": null,&#xd;
    "statusdescription": "Incomple CR Number",&#xd;
    "fullexception": null&#xd;
}&#xd;
</format>
                                <args/>
                            </payloadFactory>
                        </else>
                    </filter>
                </then>
                <else>
                    <filter regex="xml" source="$ctx:format">
                        <then>
                            <payloadFactory media-type="xml">
                                <format>
                                    <ZoneOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                        <Zones>null</Zones>
                                        <success>true</success>
                                        <result>null</result>
                                        <statusdescription>Arabic  Incorrect Input</statusdescription>
                                        <fullexception>null</fullexception>
                                    </ZoneOutPutParams>
                                </format>
                                <args/>
                            </payloadFactory>
                            <propertyGroup>
                                <property name="contentType" scope="default" type="STRING" value="application/xml"/>
                                <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                            </propertyGroup>
                        </then>
                        <else>
                            <payloadFactory media-type="json">
                                <format>{&#xd;
    "totalSearchResults": null,&#xd;
    "Zones": null,&#xd;
    "success": false,&#xd;
    "result": null,&#xd;
    "statusdescription": "Arabic Incomple CR Number",&#xd;
    "fullexception": null&#xd;
}&#xd;
</format>
                                <args/>
                            </payloadFactory>
                        </else>
                    </filter>
                </else>
            </filter>
            <loopback/>
        </else>
    </filter>
    <payloadFactory media-type="json">
        <format>{&#xd;
"crnumber":$1&#xd;
}</format>
        <args>
            <arg evaluator="xml" expression="$ctx:crnumber"/>
        </args>
    </payloadFactory>
    <log level="full" separator="  AfterPayload  "/>
    <header name="Accept" scope="transport" value="application/json"/>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="outQueue" value="{$ctx:CommonLogOutQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <call>
        <endpoint key="DatabaseSystemApiCR_EP"/>
    </call>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogOutQueue}"/>
        <with-param name="outQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <propertyGroup>
        <property expression="get-property(&quot;SYSTEM_DATE&quot;, &quot;yyyy-MM-dd'  'HH:mm:ss&quot;)" name="currenttime" scope="default" type="STRING"/>
        <property expression="json-eval($.Zones[0].NAUpdateRequestDateTime)" name="NAUpdateRequestDateTime" scope="default" type="STRING"/>
        <property expression="get-property(&quot;SYSTEM_DATE&quot;, &quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;)" name="current_date" scope="default" type="STRING"/>
        <property name="CRMDataUpdHours" scope="default" type="STRING" value="4"/>
        <property expression="json-eval($.totalSearchResults)" name="totalSearchResults" scope="default" type="STRING"/>
    </propertyGroup>
    <!-- <script language="js"><![CDATA[var  simpleDateFormat = Packages.java.text.SimpleDateFormat;
var log = mc.getServiceLog();  
var today = mc.getProperty('currenttime');
var NA=mc.getProperty('NAUpdateRequestDateTime');
var fomatter = new simpleDateFormat("yyyy-MM-dd hh:mm:ss");
var d1 = fomatter.parse(today);
log.info("d1 :"+d1);
var d2 = fomatter.parse(NA);
log.info("d2 :"+d2);
var difference_In_Time= d1.getTime() - d2.getTime();
var difference_In_Hours= (difference_In_Time/ (1000 * 60 * 60))/ 24;
log.info("difference_In_Time   ::" +difference_In_Time); 
log.info("difference_In_Hours   ::" +difference_In_Hours); 
log.info("NA "+NA);
log.info("today "+today);
mc.setProperty("totalHours ", difference_In_Hours);]]></script>
    <script language="js"><![CDATA[var  simpleDateFormat = Packages.java.text.SimpleDateFormat;
var log = mc.getServiceLog(); 
var CRM= mc.getProperty('CRMDataUpdHours');
var fomatter = new simpleDateFormat("yyyy-MM-dd hh:mm:ss");
var CR = fomatter.parse(CRM).getTime();
log.info("CRMDataUpdHours "+ CR);
mc.setProperty("CRMDataUpdHours ",CR);]]></script> -->
    <filter xpath="$ctx:totalSearchResults>0">
        <then/>
        <else>
            <filter regex="e" source="translate(get-property('language'), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')">
                <then>
                    <filter regex="xml" source="$ctx:format">
                        <then>
                            <payloadFactory media-type="xml">
                                <format>
                                    <ZoneOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                        <Zones>null</Zones>
                                        <success>true</success>
                                        <result>null</result>
                                        <statusdescription>Subscription not found </statusdescription>
                                        <fullexception>null</fullexception>
                                    </ZoneOutPutParams>
                                </format>
                                <args/>
                            </payloadFactory>
                            <propertyGroup>
                                <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                                <property name="contentType" scope="default" type="STRING" value="application/xml"/>
                            </propertyGroup>
                        </then>
                        <else>
                            <payloadFactory media-type="json">
                                <format>{&#xd;
    "totalSearchResults": null,&#xd;
    "Zones": null,&#xd;
    "success": false,&#xd;
    "result": null,&#xd;
    "statusdescription": "Subscription not found.",&#xd;
    "fullexception": null&#xd;
}&#xd;
</format>
                                <args/>
                            </payloadFactory>
                        </else>
                    </filter>
                </then>
                <else>
                    <filter regex="xml" source="$ctx:format">
                        <then>
                            <payloadFactory media-type="xml">
                                <format>
                                    <ZoneOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                        <Zones>null</Zones>
                                        <success>true</success>
                                        <result>null</result>
                                        <statusdescription>Arabic Subscription not found </statusdescription>
                                        <fullexception>null</fullexception>
                                    </ZoneOutPutParams>
                                </format>
                                <args/>
                            </payloadFactory>
                            <propertyGroup>
                                <property name="contentType" scope="default" type="STRING" value="application/xml"/>
                                <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                            </propertyGroup>
                        </then>
                        <else>
                            <payloadFactory media-type="json">
                                <format>{&#xd;
    "totalSearchResults": null,&#xd;
    "Zones": null,&#xd;
    "success": false,&#xd;
    "result": null,&#xd;
    "statusdescription": "Arabic Subscription not found.",&#xd;
    "fullexception": null&#xd;
}&#xd;
</format>
                                <args/>
                            </payloadFactory>
                        </else>
                    </filter>
                </else>
            </filter>
            <loopback/>
        </else>
    </filter>
    <header name="Content-Type" scope="transport" value="application/json"/>
    <script language="nashornJs"><![CDATA[var log = mc.getServiceLog(); 
var current_date = mc.getProperty("currenttime");
            var NAUpdateRequestDateTime = mc.getProperty("NAUpdateRequestDateTime");
             var CRMDataUpdHours = mc.getProperty("CRMDataUpdHours"); 
            var ecurrent_date = new Date(current_date).getTime();
            var ecreatedOn = new Date(NAUpdateRequestDateTime).getTime();        
   function  gettime(c,m,h){
       log.info("c "+c);
	   log.info("m "+m);
	   log.info("h "+h);
              var totalHours=  c-m;
           log.info("totalHours "+totalHours);
              standerdTime = (h*60*60*1000);
        log.info("standerdTime "+standerdTime);
              if(standerdTime>totalHours)
               return true;
               else {
                  return false;  
               }
               }
            mc.setProperty("AddressOld", gettime(ecurrent_date,ecreatedOn,CRMDataUpdHours));]]></script>
    <propertyGroup>
        <property expression="get-property('totalHours ')>get-property('CRMDataUpdHours')" name="Compare" scope="default" type="BOOLEAN"/>
        <property expression="get-property('CRMDataUpdHours ')" name="CRMDataUpdHours" scope="default" type="STRING"/>
        <property expression="get-property('AddressOld')" name="AddressOld" scope="default" type="STRING"/>
    </propertyGroup>
    <log level="custom" separator=" beforeFilter  ">
        <property expression="$ctx:AddressOld" name="AddressOld"/>
        <property expression="$ctx:Compare" name=" Compare"/>
        <property expression="$ctx:CRMDataUpdHours" name="CRMDataUpdHours"/>
    </log>
    <filter regex="true" source="$ctx:AddressOld">
        <then>
            <filter regex="e" source="translate($ctx:language,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')">
                <then>
                    <script language="js"><![CDATA[var payload = mc.getPayloadJSON()
  var Zones = constructZone();
var transform = {
  "totalSearchResults": payload.totalSearchResults,
  "Zones":Zones,
  "success": payload.success,
  "result": payload.result,
  "statusdescription": payload.statusdescription,
  "fullexception": payload.fullexception
}
   mc.setPayloadJSON(transform);
  function constructZone () {
      var Zone=[];
      for(i=0;i<payload.Zones.length;i++) {
var d=payload.Zones[i];
          var data = {
              DistrictNameEN:  ( null !=d.old_DistrictAreaEN?d.old_DistrictAreaEN :""),
              CityNameEN:  ( null !=d.old_CityNameEN?d.old_CityNameEN :""),
              RegionNameEN:  ( null !=d.old_RegionNameEN?d.old_RegionNameEN :""),
              CityID:  ( null !=d.old_GISCityID?d.old_GISCityID :""),
              RegionID:  ( null !=d.old_RegionId?d.old_RegionId :""),
              DistrictID: "",
              RegionNameAR:  ( null !=d.old_RegionNameAR?d.old_RegionNameAR :""),
              CityNameAR:  ( null !=d.old_CityNameAR?d.old_CityNameAR :""),
              DistrictNameAR:  ( null !=d.old_DistrictAreaAR?d.old_DistrictAreaAR :""),
              ZipCode: ( null !=d.old_ZipCode?d.old_ZipCode :"")
          }
          Zone.push(data);
        };
        return Zone;
  }]]></script>
                </then>
                <else>
                    <script language="js"><![CDATA[var payload = mc.getPayloadJSON();
  var Zones = constructZone();
var transform = {
  "totalSearchResults": payload.totalSearchResults,
  "Zones":Zones,
  "success": payload.success,
  "result": payload.result,
  "statusdescription": payload.statusdescription,
  "fullexception": payload.fullexception
}
   mc.setPayloadJSON(transform);
  function constructZone () {
      var Zone=[];
      for(i=0;i<payload.Zones.length;i++) {
var d=payload.Zones[i];
          var data = {
              DistrictNameAR:  ( null !=d.old_DistrictAreaAR?d.old_DistrictAreaAR :""),
              CityNameAR:  ( null !=d.old_CityNameAR?d.old_CityNameAR :""),
              RegionNameAR:  ( null !=d.old_RegionNameAR?d.old_RegionNameAR :""),
              CityID:  ( null !=d.old_GISCityID?d.old_GISCityID :""),
              RegionID:  ( null !=d.old_RegionId?d.old_RegionId :""),
              DistrictID: "",
              RegionNameEN:  ( null !=d.old_RegionNameEN?d.old_RegionNameEN :""),
              CityNameEN:  ( null !=d.old_CityNameEN?d.old_CityNameEN :""),
              DistrictNameEN:  ( null !=d.old_DistrictAreaEN?d.old_DistrictAreaEN :""),
              ZipCode: ( null !=d.old_ZipCode?d.old_ZipCode :"")
          }
          Zone.push(data);
        };
        return Zone;
  }]]></script>
                </else>
            </filter>
        </then>
        <else>
            <filter regex="e" source="translate($ctx:language,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')">
                <then>
                    <script language="js"><![CDATA[var payload = mc.getPayloadJSON();
  var Zones = constructZone();
var transform = {
  "totalSearchResults": payload.totalSearchResults,
  "Zones":Zones,
  "success": payload.success,
  "result": payload.result,
  "statusdescription": payload.statusdescription,
  "fullexception": payload.fullexception
}
   mc.setPayloadJSON(transform);
  function constructZone () {
      var Zone=[];
      for(i=0;i<payload.Zones.length;i++) {
var d=payload.Zones[i];
          var data = {
              DistrictNameEN:  ( null !=d.DistrictAreaEN?d.DistrictAreaEN :""),
              CityNameEN:  ( null !=d.CityNameEN?d.CityNameEN :""),
              RegionNameEN:  ( null !=d.RegionNameEN?d.RegionNameEN :""),
              CityID:  ( null !=d.GISCityID?d.GISCityID :""),
              RegionID:  ( null !=d.RegionId?d.RegionId :""),
              DistrictID: "",
              RegionNameAR:  ( null !=d.RegionNameAR?d.RegionNameAR :""),
              CityNameAR:  ( null !=d.CityNameAR?d.CityNameAR :""),
              DistrictNameAR:  ( null !=d.DistrictAreaAR?d.DistrictAreaAR :""),
              ZipCode: ( null !=d.ZipCode?d.ZipCode :"")
          }
          Zone.push(data);
        };
        return Zone;
  }]]></script>
                </then>
                <else>
                    <script language="js"><![CDATA[var payload = mc.getPayloadJSON();
  var Zones = constructZone();
var transform = {
  "totalSearchResults": payload.totalSearchResults,
  "Zones":Zones,
  "success": payload.success,
  "result": payload.result,
  "statusdescription": payload.statusdescription,
  "fullexception": payload.fullexception
}
   mc.setPayloadJSON(transform);
  function constructZone () {
      var Zone=[];
      for(i=0;i<payload.Zones.length;i++) {
var d=payload.Zones[i];
          var data = {
              DistrictNameAR:  ( null !=d.DistrictAreaAR?d.DistrictAreaAR :""),
              CityNameAR:  ( null !=d.CityNameAR?d.CityNameAR :""),
              RegionNameAR:  ( null !=d.RegionNameAR?d.RegionNameAR :""),
              CityID:  ( null !=d.GISCityID?d.GISCityID :""),
              RegionID:  ( null !=d.RegionId?d.RegionId :""),
              DistrictID: "",
              RegionNameEN:  ( null !=d.RegionNameEN?d.RegionNameEN :""),
              CityNameEN:  ( null !=d.CityNameEN?d.CityNameEN :""),
              DistrictNameEN:  ( null !=d.DistrictAreaEN?d.DistrictAreaEN :""),
              ZipCode: ( null !=d.ZipCode?d.ZipCode :"")
          }
          Zone.push(data);
        };
        return Zone;
  }]]></script>
                </else>
            </filter>
        </else>
    </filter>
    <propertyGroup>
        <property expression="json-eval($.totalSearchResults)" name="totalSearchResults" scope="default" type="STRING"/>
        <property expression="json-eval($.Zones)" name="Zones" scope="default" type="STRING"/>
        <property expression="json-eval($.success)" name="success" scope="default" type="STRING"/>
        <property expression="json-eval($.result)" name="result" scope="default" type="STRING"/>
        <property expression="json-eval($.statusdescription)" name="statusdescription" scope="default" type="STRING"/>
        <property expression="json-eval($.fullexception)" name="fullexception" scope="default" type="STRING"/>
        <property expression="json-eval($.success)" name="successStatus" scope="default" type="STRING"/>
    </propertyGroup>
    <filter regex="xml" source="$ctx:format">
        <then>
            <payloadFactory media-type="json">
                <format>{&#xd;
"Zones":{"Zone":$1}}</format>
                <args>
                    <arg evaluator="xml" expression="$ctx:Zones"/>
                </args>
            </payloadFactory>
            <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
            <payloadFactory media-type="xml">
                <format>
                    <ZoneOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                        <success>$2</success>
                        <result>$3</result>
                        <statusdescription>$4</statusdescription>
                        <fullexception>$5</fullexception>
 $1
</ZoneOutPutParams>
                </format>
                <args>
                    <arg evaluator="xml" expression="$body//jsonObject/Zones"/>
                    <arg evaluator="xml" expression="$ctx:success"/>
                    <arg evaluator="xml" expression="$ctx:result"/>
                    <arg evaluator="xml" expression="$ctx:statusdescription"/>
                    <arg evaluator="xml" expression="$ctx:fullexception"/>
                </args>
            </payloadFactory>
            <property name="contentType" scope="default" type="STRING" value="application/xml"/>
        </then>
        <else>
            <propertyGroup>
                <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
                <property name="contentType" scope="default" type="STRING" value="application/json"/>
            </propertyGroup>
        </else>
    </filter>
</sequence>
