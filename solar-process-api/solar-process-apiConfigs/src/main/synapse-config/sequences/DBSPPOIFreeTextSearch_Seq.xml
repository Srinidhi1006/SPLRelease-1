<?xml version="1.0" encoding="UTF-8"?>
<sequence name="DBSPPOIFreeTextSearch_Seq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <propertyGroup>
        <property expression="get-property('query.param.language')" name="language" scope="default" type="STRING"/>
        <property expression="get-property('query.param.cityalias')" name="cityalias" scope="default" type="STRING"/>
        <property expression="get-property('query.param.zipcode')" name="zipcode" scope="default" type="STRING"/>
        <property expression="get-property('query.param.districtalias')" name="districtalias" scope="default" type="STRING"/>
        <property expression="get-property('query.param.servicetype')" name="servicetype" scope="default" type="STRING"/>
        <property expression="get-property('query.param.servicestring')" name="servicename" scope="default" type="STRING"/>
        <property expression="get-property('query.param.category')" name="category" scope="default" type="STRING"/>
        <property expression="get-property('query.para,.cityids')" name="cityids" scope="default" type="STRING"/>
        <property expression="get-property('query.param.districtid')" name="districtid" scope="default" type="STRING"/>
        <property expression="get-property('query.param.pageNumber')" name="pageNumber" scope="default" type="STRING"/>
        <property expression="get-property('query.param.regionid')" name="regionid" scope="default" type="STRING"/>
        <property expression="get-property('query.param.format')" name="format" scope="default" type="STRING"/>
        <property expression="get-property('query.param.encode')" name="encode" scope="default" type="STRING"/>
    </propertyGroup>
    <propertyGroup>
        <property name="CommonLogFlowId" scope="default" type="STRING" value="POIFreeTextSearch"/>
        <property name="CommonLogInQueue" scope="default" type="STRING" value="GET -/ProcessAPI/POIFreeTextSearch"/>
        <property expression="get-property('MessageID')" group="3" name="CommonLogLoggingId" pattern="((urn|uuid):)*(.*)" scope="default" type="STRING"/>
        <property expression="get-property('correlation_id')" name="CommonLogLoggingId2" scope="default" type="STRING"/>
        <property name="CommonLogMessageType" scope="default" type="STRING" value="application/json"/>
        <property name="CommonLogOutQueue" scope="default" type="STRING" value="GET -/ProcessAPI/POIFreeTextSearch"/>
        <property expression="translate(get-property('language'),' ','')" name="language" scope="default" type="STRING"/>
    </propertyGroup>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <filter regex="e" source="translate(get-property('language'), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')">
        <then/>
        <else>
            <property name="language" scope="default" type="STRING" value="a"/>
        </else>
    </filter>
    <payloadFactory media-type="json">
        <format>{&#xd;
"language":"$1",&#xd;
"cityalias":"$2",&#xd;
"zipcode":"$3",&#xd;
"districtalias":"$4",&#xd;
"servicetype":"$5",&#xd;
"servicename":"$6",&#xd;
"category":"$7",&#xd;
"cityids":"$8",&#xd;
"districtid":"$9",&#xd;
"pageNumber":"$10",&#xd;
"regionid":"$11"&#xd;
}</format>
        <args>
            <arg evaluator="xml" expression="$ctx:language"/>
            <arg evaluator="xml" expression="$ctx:cityalias"/>
            <arg evaluator="xml" expression="$ctx:zipcode"/>
            <arg evaluator="xml" expression="$ctx:districtalias"/>
            <arg evaluator="xml" expression="$ctx:servicetype"/>
            <arg evaluator="xml" expression="$ctx:servicename"/>
            <arg evaluator="xml" expression="$ctx:category"/>
            <arg evaluator="xml" expression="$ctx:cityids"/>
            <arg evaluator="xml" expression="$ctx:districtid"/>
            <arg evaluator="xml" expression="$ctx:pageNumber"/>
            <arg evaluator="xml" expression="$ctx:regionid"/>
        </args>
    </payloadFactory>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="outQueue" value="{$ctx:CommonLogOutQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <call>
        <endpoint key="DBSPPOIFreeTextSearchSys_EP"/>
    </call>
    <log level="full" separator="   POIFreeTextSearchAfterEP   "/>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogOutQueue}"/>
        <with-param name="outQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <script language="js"><![CDATA[var payload =mc.getPayloadJSON();

if(Object.keys(payload.Service).length>0)
{
var transform = {
"totalSearchResults": payload.TotalSearchCount,
"Addresses":constructAddress(),
"PostCode":null,
"success": true,
"result": null,
"statusdescription": "SUCCESS",
"fullexception": null
};
}
else
{
var transform = {
"totalSearchResults": "0",
"Addresses":[],
"PostCode":null,
"success": true,
"result": null,
"statusdescription": "NO-RESULTS",
"fullexception": null
};
}

mc.setPayloadJSON(transform);



function constructAddress () {
var address=[];

for(i=0;i<payload.Service.length;i++)
 {
var d=payload.Service[i];
var data = {
Title : (null != d.alias?d.alias: null),
Address1 : (null != d.buildingnumber?d.buildingnumber:"" )+ " "+( null != d.streetname?(d.streetname):"")+" - "+(null != d.districtname?(d.districtname):""),
Address2: (null != d.cityname?d.cityname:"" )+" "+( null != d.zipcode ?d.zipcode:"")+" - "+(null != d.additionalnumber?d.additionalnumber:""),
ObjLatLng:(null != d.objectid?d.objectid:"" )+" "+( null != d.centroidx ?d.centroidx:"")+" - "+(null != d.centroidy?d.centroidy:"")+(null != d.minx?d.minx:"" )+" ",
BuildingNumber:( null !=d.buildingnumber?d.buildingnumber : null),
Street:( null !=d.streetname?d.streetname : null),
District:( null !=d.districtname?d.districtname : null),
City:( null !=d.cityname?d.cityname : null),
PostCode:( null !=d.zipcode?d.zipcode : null),
AdditionalNumber:( null !=d.additionalnumber?d.additionalnumber : null),
RegionName:( null !=d.regionname?d.regionname : null),
PolygonString: ( null !=d.PolygonString?d.PolygonString :null),
IsPrimaryAddress: ( null !=d.isprimaryaddress?d.isprimaryaddress : null),
UnitNumber: ( null !=d.unitnumber?d.unitnumber : null),
Latitude:( null !=d.centroidx?d.centroidx : null),
Longitude:( null !=d.centroidy?d.centroidy : null),
CityId:( null !=d.cityid?d.cityid : null),
RegionId:( null !=d.regionid?d.regionid : null),
Restriction:( null !=d.restriction?d.restriction : null),
PKAddressID:( null !=d.PKAddressID?d.PKAddressID : null),
DistrictID:( null !=d.districtid?d.districtid : null),
Title_L2:( null !=d.alias_E?d.alias_E :null),
RegionName_L2:( null !=d.regionname_E?d.regionname_E : null),
City_L2:( null !=d.cityname_E?d.cityname_E : null),
Street_L2:( null !=d.streetname_E?d.streetname_E : null),
District_L2:( null !=d.districtname_E?d.districtname_E : null),
CompanyName_L2: ( null !=d.companyname_E?d.companyname_E :null),
GovernorateID: ( null !=d.governorateid?d.governorateid : null),
Governorate: ( null !=d.governoratename?d.governoratename : null),
Governorate_L2: ( null !=d.governoratename_E?d.governoratename_E : null)
}
address.push(data);
};
return address;
}]]></script>
    <filter regex="xml" source="$ctx:format">
        <then>
            <propertyGroup>
                <property expression="json-eval($.Addresses)" name="Addresses" scope="default" type="STRING"/>
                <property expression="json-eval($.totalSearchResults)" name="totalSearchResults" scope="default" type="STRING"/>
                <property expression="json-eval($.PostCode)" name="PostCode" scope="default" type="STRING"/>
                <property expression="json-eval($.success)" name="success" scope="default" type="STRING"/>
                <property expression="json-eval($.statusdescription)" name="statusdescription" scope="default" type="STRING"/>
            </propertyGroup>
            <log level="full" separator="------INFilter------"/>
            <filter regex="^0*?[1-9]\d*$" source="$body//jsonObject/totalSearchResults">
                <then>
                    <log level="full" separator="-------Filter2-------"/>
                </then>
                <else>
                    <payloadFactory media-type="xml">
                        <format>
                            <AddressOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                <success>true</success>
                                <statusdescription>SUCCESS</statusdescription>
                                <totalSearchResults>0</totalSearchResults>
                                <Addresses/>
                            </AddressOutPutParams>
                        </format>
                        <args/>
                    </payloadFactory>
                    <respond/>
                </else>
            </filter>
            <script language="js"><![CDATA[var input = mc.getPayloadJSON();
var log= mc.getServiceLog();
var Addressproperty = {
    "totalSearchResults": input.totalSearchResults,
    "Address": constructAddress(),
     "success": input.success,
    "PostCode": input.PostCode,
    "result": input.result,
    "statusdescription": input.statusdescription,
    "fullexception": input.fullexception
}

 mc.setPayloadJSON(Addressproperty);

   function constructAddress() {
        var Addresses=[];
         for (j = 0; j < input.Addresses.length; j++) {
              var address={};
      var payload = input.Addresses[j];
      var payloadArray = objectValues(payload);
       log.info(payloadArray);
for (i = 0; i < payloadArray.length; i++) {
    if(payloadArray[i] != null)
  {
    var key = Object.keys(payload)[i];
     var value = payloadArray[i];
    address[key] = value ;
  }
}
Addresses.push(address);
}
        return Addresses;
    }

function objectValues(obj) {
    var vals = [];
    for (prop in obj) {
        vals.push(obj[prop]);
    }
    return vals;
};

log.info(Addressproperty);]]></script>
            <log level="full" separator="------logAfterSecondScript------------"/>
            <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
            <payloadFactory media-type="xml">
                <format>
                    <AddressOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi=" http://www.w3.org/2001/XMLSchema-instance">
                        <success>$2</success>
                        <statusdescription>$3</statusdescription>
                        <totalSearchResults>$4</totalSearchResults>
$1
</AddressOutPutParams>
                </format>
                <args>
                    <arg evaluator="xml" expression="$body//jsonObject/Address"/>
                    <arg evaluator="xml" expression="$body//jsonObject/success"/>
                    <arg evaluator="xml" expression="$body//jsonObject/statusdescription"/>
                    <arg evaluator="xml" expression="$body//jsonObject/totalSearchResults"/>
                </args>
            </payloadFactory>
            <property name="contentType" scope="default" type="STRING" value="application/xml"/>
        </then>
        <else>
            <property name="contentType" scope="default" type="STRING" value="application/json"/>
            <propertyGroup>
                <property name="contentType" scope="default" type="STRING" value="application/json"/>
                <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            </propertyGroup>
        </else>
    </filter>
</sequence>
