<?xml version="1.0" encoding="UTF-8"?>
<sequence name="DBSPSearchByPKAddressID" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <property expression="get-property('query.param.addressid')" name="addressid" scope="default" type="STRING"/>
    <propertyGroup>
        <property expression="fn:substring($ctx:addressid, 6, 4)" name="buildingno" scope="default" type="STRING"/>
        <property expression="fn:substring($ctx:addressid, 10, 4)" name="additionalno" scope="default" type="STRING"/>
        <property expression="fn:substring($ctx:addressid, 1, 5)" name="zipcode" scope="default" type="STRING"/>
        <property expression="get-property('query.param.language')" name="language" scope="default" type="STRING"/>
        <property expression="get-property('query.param.regionid')" name="regionid" scope="default" type="STRING"/>
        <property expression="get-property('query.param.cityalias')" name="cityalias" scope="default" type="STRING"/>
        <property expression="get-property('query.param.districtalias')" name="districtalias" scope="default" type="STRING"/>
        <property expression="get-property('query.param.street')" name="street" scope="default" type="STRING"/>
        <property expression="get-property('query.param.streetdistrict')" name="streetdistrict" scope="default" type="STRING"/>
        <property expression="get-property('query.param.cityids')" name="cityids" scope="default" type="STRING"/>
        <property expression="get-property('query.param.districtid')" name="districtid" scope="default" type="STRING"/>
        <property expression="get-property('query.param.pageNumber')" name="pageNumber" scope="default" type="STRING"/>
        <property expression="get-property('query.param.pageSize')" name="pageSize" scope="default" type="STRING"/>
        <property expression="get-property('query.param.format')" name="format" scope="default" type="STRING"/>
        <property expression="get-property('query.param.encode')" name="encode" scope="default" type="STRING"/>
    </propertyGroup>
    <property expression="translate(get-property('language'),' ','')" name="language" scope="default" type="STRING"/>
    <propertyGroup>
        <property name="CommonLogFlowId" scope="default" type="STRING" value="PAPISearchByPKAddressID"/>
        <property name="CommonLogInQueue" scope="default" type="STRING" value="GET -/ProcessAPI/searchaddressbypkAddressID"/>
        <property expression="get-property('MessageID')" group="3" name="CommonLogLoggingId" pattern="((urn|uuid):)*(.*)" scope="default" type="STRING"/>
        <property expression="get-property('correlation_id')" name="CommonLogLoggingId2" scope="default" type="STRING"/>
        <property name="CommonLogMessageType" scope="default" type="STRING" value="application/json"/>
        <property name="CommonLogOutQueue" scope="default" type="STRING" value="GET -/ProcessAPI/searchaddressbypkAddressID"/>
    </propertyGroup>
    <log level="full">
        <property name="Entry == " value="Entry"/>
    </log>
    <filter regex="[0-9]{13}" source="get-property('query.param.addressid')">
        <then/>
        <else>
            <log level="custom">
                <property expression="get-property('query.param.language')" name="lang"/>
            </log>
            <filter regex="xml" source="$ctx:format">
                <then>
                    <payloadFactory media-type="xml">
                        <format>
                            <AddressOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                <success>false</success>
                                <statusdescription>Incorrect length of input paramters.</statusdescription>
                            </AddressOutPutParams>
                        </format>
                        <args/>
                    </payloadFactory>
                </then>
                <else>
                    <payloadFactory media-type="json">
                        <format>{&#xd;
    "totalSearchResults": null,&#xd;
    "Addresses": null,&#xd;
    "PostCode": null,&#xd;
    "success": false,&#xd;
    "result": null,&#xd;
    "statusdescription": "Incorrect length of input paramters.",&#xd;
    "fullexception": null&#xd;
}</format>
                        <args/>
                    </payloadFactory>
                </else>
            </filter>
            <loopback/>
        </else>
    </filter>
    <property expression="translate(get-property('language'),' ','')" name="language" scope="default" type="STRING"/>
    <filter regex="e" source="translate(get-property('language'), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')">
        <then/>
        <else>
            <property name="language" scope="default" type="STRING" value="a"/>
        </else>
    </filter>
    <payloadFactory media-type="json">
        <format>{&#xd;
	"language": "$1",&#xd;
	"regionid": "$2",&#xd;
	"cityalias": "$3",&#xd;
	"buildingno": "$4",&#xd;
	"additionalno": "$5",&#xd;
	"zipcode": "$6",&#xd;
	"districtalias": "$7",&#xd;
	"street": "$8",&#xd;
	"streetdistrict": "$9",&#xd;
	"cityids": "$10",&#xd;
	"districtid": "$11",&#xd;
	"pageNumber": "$12",&#xd;
	"pageSize": "$13"&#xd;
}</format>
        <args>
            <arg evaluator="xml" expression="$ctx:language"/>
            <arg evaluator="xml" expression="$ctx:regionid"/>
            <arg evaluator="xml" expression="$ctx:cityalias"/>
            <arg evaluator="xml" expression="$ctx:buildingno"/>
            <arg evaluator="xml" expression="$ctx:additionalno"/>
            <arg evaluator="xml" expression="$ctx:zipcode"/>
            <arg evaluator="xml" expression="$ctx:districtalias"/>
            <arg evaluator="xml" expression="$ctx:street"/>
            <arg evaluator="xml" expression="$ctx:streetdistrict"/>
            <arg evaluator="xml" expression="$ctx:cityids"/>
            <arg evaluator="xml" expression="$ctx:districtid"/>
            <arg evaluator="xml" expression="$ctx:pageNumber"/>
            <arg evaluator="xml" expression="$ctx:pageSize"/>
        </args>
    </payloadFactory>
    <log level="full" separator=" --Check-- ">
        <property expression="$ctx:language" name="checkLanguage"/>
    </log>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="outQueue" value="{$ctx:CommonLogOutQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <call>
        <endpoint key="DBSPSearchAddressByPKAddressIDSys_EP"/>
    </call>
    <log level="full" separator=" --CheckSysAPIResp-- "/>
    <script language="js"><![CDATA[var payload = mc.getPayloadJSON();
var log = mc.getServiceLog(); 
log.info("logging inside script");
log.info(JSON.stringify(payload));
var Parcel=[];

 Parcel = constructParcel();

if(Object.keys(payload.Parcel).length > 0)

{
var Parcels = {

 "totalSearchResults": payload.TotalSearchCount,

 "Addresses": Parcel,

 "PostCode": null,

 "success": true,

 "result": null,

 "statusdescription": "SUCCESS",

 "fullexception": null

};
}

else
{
var Parcels = {

 "totalSearchResults": "0",

 "Addresses": null,

 "PostCode": null,

 "success": true,

 "result": null,

 "statusdescription": "NO-RESULTS",

 "fullexception": null

};
}

mc.setPayloadJSON(Parcels);



 function constructParcel() {


for (i = 0; i < payload.Parcel.length; ++i)

{

d = payload.Parcel[i];



var data = {

 Title: (null != d.alias? d.alias: null ),
  Address1: ((null != d.buildingnumber? d.buildingnumber: "")+" "+(null != d.streetname? d.streetname: "")+" - "+(null != d.districtname? d.districtname: "")),
 Address2: ((null != d.cityname? d.cityname: "")+" "+(null != d.zipcode? d.zipcode: "")+(d.additionalnumber !=  null? (" - "+d.additionalnumber): "")),
  ObjLatLng: ((null != d.objectid? d.objectid: "")+" "+(null != d.centroidx? d.centroidx: "")+" "+(null != d.centroidy? d.centroidy: "")+" "+(null != d.minx? d.minx: "")+" "+(null != d.miny? d.miny: "")+" "+(null != d.maxx? d.maxx: "")+" "+(null != d.maxy? d.maxy: "")).trim(),
   BuildingNumber: ( null != d.buildingnumber?d.buildingnumber : null),
 Street: (null != d.streetname? d.streetname: ""),
 District: ( null != d.districtname?d.districtname: null),
 City: ( null != d.cityname?d.cityname: null),
 PostCode: (null != d.zipcode ? d.zipcode : null),
 AdditionalNumber: (null != d.additionalnumber? d.additionalnumber: null),
 RegionName: ( null != d.regionname?d.regionname: null),
  PolygonString: (null != d.polygonwkt? d.polygonwkt: null),
  IsPrimaryAddress: ( null != d.isprimaryaddress?d.isprimaryaddress : null),
   UnitNumber: ( null != d.unitnumber?d.unitnumber : null),
    Latitude: (null != d.centroidy?d.centroidy : null),
   Longitude: (null != d.centroidx?d.centroidx : null),
  CityId: (null != d.cityid? d.cityid: null),
  RegionId: (null != d.regionid? d.regionid: null),
   Restriction: (null != d.restriction? d.restriction: ""),
    PKAddressID: (null != d.PKAddressID? d.PKAddressID: null),
 DistrictID: (null != d.districtid? d.districtid: null),
  Title_L2: ( null != d.alias_E?d.alias_E : null),
 RegionName_L2: ( null != d.regionname_E?d.regionname_E : null),
 City_L2: ( null != d.cityname_E?d.cityname_E : null),
  Street_L2: ( null != d.streetname_E?d.streetname_E : ""),
 District_L2: ( null !=d.districtname_E?d.districtname_E : null),
 CompanyName_L2: ( null !=d.companyname_E?d.companyname_E: null),
 GovernorateID: (null != d.governorateid? d.governorateid: null),
 Governorate: ( null != d.governoratename?d.governoratename : null),
 Governorate_L2: ( null != d.governoratename_E?d.governoratename_E : null)

}



Parcel.push(data);

}

 return Parcel;

}]]></script>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogOutQueue}"/>
        <with-param name="outQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <log level="full" separator=" --AfterScript-- "/>
    <filter regex="xml" source="$ctx:format">
        <then>
            <log level="full" separator="****************After2ndScript*****************">
                <property expression="$ctx:Addressproperty" name="Addressproperty"/>
            </log>
            <log level="full" separator="##"/>
            <log level="full" separator="--AfterXmlConversion--"/>
            <filter regex="^0*?[1-9]\d*$" source="$body//jsonObject/totalSearchResults">
                <then>
                    <script language="js"><![CDATA[var input = mc.getPayloadJSON();
var log= mc.getServiceLog();
var Addressproperty = {
    "totalSearchResults": input.totalSearchResults,
    "Address": constructAddress(),
    "PostCode": input.PostCode,
    "result": input.result,
    "statusdescription": input.statusdescription,
    "fullexception": input.fullexception
}

 mc.setPayloadJSON(Addressproperty);

   function constructAddress() {
        var Addresses=[];
         for (j = 0; j < input.Addresses.length; j++) {
              var address={};
      var payload = input.Addresses[j];
      var payloadArray = objectValues(payload);
       log.info(payloadArray);
for (i = 0; i < payloadArray.length; i++) {
    if(payloadArray[i] != null)
  {
    var key = Object.keys(payload)[i];
     var value = payloadArray[i];
    address[key] = value ;
  }
}
Addresses.push(address);
}
        return Addresses;
    }

function objectValues(obj) {
    var vals = [];
    for (prop in obj) {
        vals.push(obj[prop]);
    }
    return vals;
};

log.info(Addressproperty);]]></script>
                    <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                    <payloadFactory media-type="xml">
                        <format>
                            <AddressOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                <totalSearchResults>$1</totalSearchResults>
                                <Addresses>$2</Addresses>
                                <success>true</success>
                                <statusdescription>$3</statusdescription>
                            </AddressOutPutParams>
                        </format>
                        <args>
                            <arg evaluator="xml" expression="$body//jsonObject/totalSearchResults"/>
                            <arg evaluator="xml" expression="$body//jsonObject/Address"/>
                            <arg evaluator="xml" expression="$body//jsonObject/statusdescription"/>
                        </args>
                    </payloadFactory>
                </then>
                <else>
                    <payloadFactory media-type="xml">
                        <format>
                            <AddressOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                <success>true</success>
                                <statusdescription>NO-RESULTS</statusdescription>
                                <totalSearchResults>0</totalSearchResults>
                            </AddressOutPutParams>
                        </format>
                        <args/>
                    </payloadFactory>
                </else>
            </filter>
            <property name="contentType" scope="default" type="STRING" value="application/xml"/>
        </then>
        <else>
            <log level="full" separator=" --JSON-- "/>
            <propertyGroup>
                <property name="contentType" scope="default" type="STRING" value="application/json"/>
                <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            </propertyGroup>
        </else>
    </filter>
</sequence>
